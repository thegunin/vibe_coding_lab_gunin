ТЗ / Промпт для разработки Telegram-бота (python-telegram-bot)

## Цель
Бот для сбора обратной связи в команде с ролями «руководитель» и «сотрудник»: создание вопросов, сбор оценок 1–5, уведомления руководителю, «Отчёты» со средним баллом и количеством ответов, история уведомлений, простое хранение в SQLite, понятный UX, подробные комментарии в коде и обработка ошибок.

## Технический стек
- ЯП: Python 3.10+
- Фреймворк: `python-telegram-bot` (v20+)
- Хранение: SQLite (`sqlite3` из стандартной библиотеки), один файл БД
- Конфиг: `.env` через `python-dotenv`
- Логи: стандартный `logging` (ротация не требуется)
- Деплой: «как есть», без Docker (опционально добавить systemd-юнит — вне объёма ТЗ)

## Роли и учётные записи (логин/пароль)
Для демонстрации сделать встроенные (seed) учётки:
- Руководитель: **login:** `manager`, **password:** `manager-password`
- Сотрудники:  
  `employee-1` / `employee-1`  
  `employee-2` / `employee-2`  
  `employee-3` / `employee-3`

> После успешного входа Telegram-пользователь (его `user_id`) закрепляется за ролью до «Сменить аккаунт». Пароль хранить в БД в виде SHA256 (соль в .env, см. ниже).

## Пользовательские сценарии (UX-потоки)

### Общие
- `/start` → показать главное меню, если не залогинен — мини-мастер входа.
- Главное меню (кнопки ReplyKeyboard):
  - Если **не залогинен**: `Войти`
  - Если **сотрудник**: `Вопросы`, `Мои ответы`, `Сменить аккаунт`
  - Если **руководитель**: `Создать вопрос`, `Отчёты`, `Уведомления`, `Сменить аккаунт`

### Вход / выход
- `Войти` → запросить логин → запросить пароль (не отображать в явном виде — принять как сообщение).
- Успех: закрепить роль за `tg_user_id`, показать соответствующее меню.
- Ошибка: 1) неправильная пара логин/пароль; 2) заблокированная учётка — показать понятную ошибку.
- `Сменить аккаунт`: разлогинить, удалить привязку `tg_user_id`↔роль (сохраняя историю ответов).

### Руководитель
- `Создать вопрос`:
  - Запросить текст вопроса (свободная формулировка).
  - Сохранить вопрос со статусом **active**, датой создания и автором.
  - Автоматически к вопросу доступны варианты ответа 1–5 (Inline-кнопки у сотрудников).
- `Отчёты`:
  - Показать список вопросов (активные и закрытые) батчами по 10:  
    «#12 • “Как ретро?” • ср. 4.1 • ответов 23 • активен»
  - Кнопки к каждому вопросу:
    - `Детали` → таблица: распределение 1–5, среднее, медиана, % участия (ответившие/все залогиненные сотрудники), дата создания/закрытия.
    - `Экспорт CSV` → прислать CSV с колонками: `question_id, question_text, employee_login, score, created_at`.
    - `Закрыть/Открыть` → переключить статус. (Закрытый вопрос не отображается сотрудникам для ответа.)
- `Уведомления`:
  - При каждом ответе сотрудника руководителю приходит Alert в ЛС:  
    «employee-2 ответил на “Как ретро?” — **4/5**».
  - Кнопка `Уведомления` показывает список последних N уведомлений с пагинацией и кнопкой `Отметить как прочитанные`.

### Сотрудник
- `Вопросы`:
  - Показывать список **неотвеченных активных** вопросов (заголовок, первые 80 символов текста).
  - При выборе вопроса → экран с полным текстом и Inline-кнопками `[1] [2] [3] [4] [5]`.
  - Ограничение: 1 ответ на вопрос на сотрудника (см. «Повторный ответ» ниже).
- `Мои ответы`:
  - Список последних ответов: вопрос, оценка, дата.  
  - Кнопка `Изменить ответ` — разрешено **до тех пор**, пока вопрос активен (обновляется оценка и создаётся новое уведомление руководителю «ответ изменён»).

## Модель данных (SQLite)
(Сокращено для краткости — структура как в ТЗ выше)